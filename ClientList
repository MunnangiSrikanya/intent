import React, { useEffect, useState } from 'react';
import { Button, Card, Dialog, DialogActions, DialogContent, DialogTitle, Divider, Grid, IconButton, TextField, Typography } from '@material-ui/core';
import AttachFileIcon from '@material-ui/icons/AttachFile';
import CloseIcon from '@material-ui/icons/Close';
import { useDropzone } from 'react-dropzone';
import SnackbarComponent from '../SnackbarComponent';
import { Autocomplete } from '@material-ui/lab';
import './CreateIntent.css';

interface Client {
  AccountName: string;
}

interface FileType {
  TypeName: string;
}

interface OpenMessage {
  open: boolean;
  vertical: 'top' | 'bottom';
  horizontal: 'left' | 'center' | 'right';
  severity: 'success' | 'error' | 'warning' | 'info';
  msg: string;
}

interface IntentProps {
  setNewIntentState: (state: boolean) => void;
}

const Intent: React.FC<IntentProps> = ({ setNewIntentState }) => {
  const [selectedFileType, setSelectedFileType] = useState<string>('Select');
  const [fileTypes, setFileTypes] = useState<string[]>([]);
  const [selectedClientName, setSelectedClientName] = useState<Client | null>(null);
  const [attachmentClick, setAttachmentClick] = useState<boolean>(false);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);
  const [openMessage, setOpenMessage] = useState<OpenMessage>({
    open: false,
    vertical: 'top',
    horizontal: 'right',
    severity: 'success',
    msg: ''
  });

  useEffect(() => {
    const fetchFileTypes = async () => {
      // Replace this with actual data fetching logic
      const fileTypeData = ['Additional Medicare Intent', 'CMS BID', 'Clinical Supplements'];
      setFileTypes(fileTypeData);
    };

    fetchFileTypes();
  }, []);

  const handleClientNameChange = (event: React.ChangeEvent<{}>, value: Client | null) => {
    setSelectedClientName(value);
  };

  const handleFileTypeChange = (event: React.ChangeEvent<{}>, value: string | null) => {
    setSelectedFileType(value || 'Select');
  };

  const handleAttachment = () => {
    setAttachmentClick(true);
  };

  const handleClose = () => {
    setAttachmentClick(false);
    setUploadedFiles([]);
  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    accept: {
      'text/csv': ['.csv'],
      'application/vnd.ms-excel': ['.xls'],
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': ['.xlsx']
    },
    maxSize: 20 * 1024 * 1024,
    onDrop: (files: File[]) => {
      const validFiles = files.filter(file =>
        ['text/csv', 'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet']
          .includes(file.type) ||
        ['.csv', '.xlsx', '.xls'].includes(file.name.slice(-4))
      );
      setUploadedFiles(validFiles);
    }
  });

  const handleUpload = () => {
    if (uploadedFiles.length > 0) {
      setAttachmentClick(false);
      setUploadedFiles([]);
      setOpenMessage({ ...openMessage, open: true, msg: 'File Uploaded Successfully!' });
    }
  };

  return (
    <>
      <Card className='card'>
        <div className='submit-intent-card-header'>
          <h2 style={{ color: '#035C67' }}>New Intent Request</h2>
          <Button variant='outlined' size='small' onClick={handleAttachment} style={{ borderRadius: '2rem' }}>
            Attach files and documents &nbsp;<AttachFileIcon style={{ transform: 'rotate(45deg)' }} fontSize='small' />
          </Button>

          <Dialog onClose={handleClose} open={attachmentClick}>
            <DialogTitle>
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
                <Typography variant="h6" style={{ color: '#035C67' }}><b>Upload files and documents</b></Typography>
                <IconButton onClick={handleClose}><CloseIcon /></IconButton>
              </div>
            </DialogTitle>
            <DialogContent>
              <div {...getRootProps()} style={{ textAlign: 'center' }}>
                <input {...getInputProps()} />
                <div style={{ border: '1px dashed black', padding: '1.75rem 4rem' }}>
                  {!isDragActive ? 'Drag and drop files here or choose files' : 'Drop files here'}
                </div>
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between', fontSize: '0.7rem', marginTop: '0.5rem' }}>
                <p>Files supported: CSV, XLSX, XLS</p>
                <p>Maximum size: 20MB</p>
              </div>
              {uploadedFiles.length !== 0 && <b><p>Uploaded files</p></b>}
              {uploadedFiles.map((file) => (
                <Card key={file.name} style={{ padding: '0.5rem', display: 'flex', justifyContent: 'space-between' }}>
                  <p><AttachFileIcon style={{ transform: 'rotate(45deg)' }} fontSize='small' /> {file.name}</p>
                  <CloseIcon onClick={() => setUploadedFiles([])} />
                </Card>
              ))}
            </DialogContent>
            <DialogActions>
              <Button onClick={handleClose} color="default" variant='outlined'>Cancel</Button>
              <Button onClick={handleUpload} color="default" variant='outlined' size='small'>
                Upload
              </Button>
            </DialogActions>
          </Dialog>
        </div>
        <Divider />
        <Card className='main-card'>
          <Grid container spacing={3}>
            <Grid item xs={12} md={6}>
              <Autocomplete
                value={selectedClientName}
                onChange={handleClientNameChange}
                options={[{ AccountName: 'Client A' }, { AccountName: 'Client B' }] as Client[]}
                getOptionLabel={(option) => option.AccountName}
                renderInput={(params) => (
                  <TextField {...params} label="Client Name" margin="normal" required variant="outlined" />
                )}
              />
            </Grid>
            <Grid item xs={12} md={6}>
              <Autocomplete
                value={selectedFileType}
                onChange={handleFileTypeChange}
                options={['Select', ...fileTypes]}
                getOptionLabel={(option) => option}
                renderInput={(params) => (
                  <TextField {...params} label="Type of File" margin="normal" required variant="outlined" />
                )}
              />
            </Grid>
          </Grid>
          <div style={{ marginTop: '2rem', display: 'flex', justifyContent: 'flex-end', gap: '1rem' }}>
            <Button variant='outlined' size='small' onClick={() => setNewIntentState(false)}>
              Cancel
            </Button>
            <Button variant='contained' size='small' onClick={() => alert('Submit')}>
              Submit
            </Button>
          </div>
        </Card>
      </Card>
      <SnackbarComponent
        open={openMessage.open}
        severity={openMessage.severity}
        onClose={() => setOpenMessage({ ...openMessage, open: false })}
        message={openMessage.msg}
        vertical={'top'}
        horizontal={'right'}
      />
    </>
  );
};

export default Intent;
